create table emp1
(
    empid1 varchar(10),
    emp_sal1 varchar(10)
)

create table emp2
(
    empid2 varchar(10),
    emp_sal2 varchar(10)
)

insert into emp1
values
("1","1000"),
("2","2000"),
("2","2000"),
("2","2000"),
("3","3000"),
(null,null),
(null,null)
(null,null)

insert into emp2
values
("1","1000"),
("2","2000"),
("2","2000"),
("3","3000"),
("3","3000"),
(null,null)

-- emp1 to emp2
-- inner join 10
-- left join 13
-- right join 11
-- full outer join 14
-- cross join 54 

-- emp2 to emp1
-- inner join 10
-- left join 11
-- right join 13
-- full outer join 14
-- cross join 54


-- for windowing functions

create table emp3
(
    empid1 int,
    emp_sal1 int,
    dept varchar(10)
)

insert into emp3
values
(1,1000,"cs"),
(1,2000,"cs"),
(1,3000,"cs"),
(1,4000,"cs"),
(2,500,"cs"),
(2,1500,"cs"),
(3,5000,"it"),
(4,5000,"it"),
(4,6000,"it"),
(5,8000,"ec"),
(5,9000,"ec"),
(6,10000,"ec")


-- dept wise top salary

/*
select * from (select *, dense_rank() over (partition by dept order by emp_sal1 desc) as r from emp3)
where r = 1
*/

-- cumm sum

/*
select *, sum(emp_sal1) over ( order by emp_sal1) as cumm from Emp3

*/

---- top department with highest salary ----

insert into emp1
values
(1,1000,"cs"),
(2,12000,"cs"),
(3,3000,"cs"),
(1,4000,"ec"),
(2,500,"ec"),
(1,5000,"me"),
(2,100,"me"),
(3,7000,"me"),
(1,5000,"ci"),
(2,1000,"ci"),
(3,17000,"ci")
(4,17000,"ci")

/*
select distinct dept from (
select dept,emp_sal, dense_rank() over (order by emp_sal desc) as r from emp1
order by emp_sal desc) where r <=2
*/

---

/*
Given a database schema with the "sales" table having columns: sale_id, sale_date, and amount,
write an SQL query to find the total sales amount for each month in the year 2023.

SELECT EXTRACT(MONTH FROM sale_date) AS month, SUM(amount) AS total_sales
FROM sales
WHERE EXTRACT(YEAR FROM sale_date) = 2023
GROUP BY EXTRACT(MONTH FROM sale_date)
ORDER BY month;
*/

/*
Given a database schema with the "employees" table having columns: employee_id, employee_name, and hire_date, 
write an SQL query to find the number of employees hired in each year.

SELECT EXTRACT(YEAR FROM hire_date) AS hire_year, COUNT(*) AS hire_count
FROM employees
GROUP BY EXTRACT(YEAR FROM hire_date)
ORDER BY hire_year;
*/

/*
Given a database schema with the "employees" table having columns: employee_id, employee_name, manager_id, and department_id, 
write an SQL query to find the names of employees who are also managers

SELECT employee_name
FROM employees
WHERE employee_id IN (SELECT DISTINCT manager_id FROM employees);
*/

/*
Given a database schema with the "orders" table having columns: order_id, customer_id, order_date, and total_amount, 
write an SQL query to find the total revenue generated by each customer.

SELECT customer_id, SUM(total_amount) AS total_revenue
FROM orders
GROUP BY customer_id;
*/

/*
Write an SQL query to find the employees who have had the highest salary in the company for each year.

SELECT name, salary, hire_date
FROM (
  SELECT name, salary, hire_date,
         RANK() OVER (PARTITION BY YEAR(hire_date) ORDER BY salary DESC) AS salary_rank
  FROM employees
) ranked_employees
WHERE salary_rank = 1;


Write an SQL query to find the names of employees who have the highest salary in their respective departments.

SELECT name, salary, department
FROM (
  SELECT name, salary, department,
         RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS salary_rank
  FROM employees
) ranked_employees
WHERE salary_rank = 1;


Write an SQL query to find the names of students who have received the highest grade in each course they have taken.

SELECT student_name, course_name, grade
FROM (
  SELECT student_name, course_name, grade,
         RANK() OVER (PARTITION BY course_name ORDER BY grade DESC) AS grade_rank
  FROM grades
) ranked_grades
WHERE grade_rank = 1;

*/

-- note: when you see each course/department then use partition by on such cols
/*
in MYSQL,
SELECT EXTRACT(DAY FROM "2017-06-15");

OR

SELECT DAY("2017-06-15");

-- DAY: to fetch the day from  date
-- MONTH: to fetch the month from the date
-- YEAR: to fetch the Year  from the date
*/